#!/usr/bin/env bash
#
# claude-sandbox - Run Claude Code in an isolated container environment
#
# This wrapper provides security-focused execution of Claude with network isolation,
# resource limits, and filesystem sandboxing.

set -euo pipefail

# Get absolute path to script, even when called via symlink
command -v realpath &> /dev/null || {
    echo "Error: 'realpath' is required but not found. Please install 'coreutils' (e.g. 'brew install coreutils' on macOS)." >&2
    exit 1
}
SCRIPT_PATH="$(realpath "${BASH_SOURCE[0]}")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"

# Script directory and paths
SANDBOX_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
CONFIG_DIR="${CLAUDE_SANDBOX_CONFIG:-$HOME/.claude-sandbox}"
DEFAULT_IMAGE="claude-sandbox:latest"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default values
RUNTIME=""
NETWORK_MODE="host"
MEMORY_LIMIT="4g"
CPU_LIMIT="2.0"
MOUNT_DIR=""
PERSIST_CONFIG="$CONFIG_DIR/config"
USE_FRESH=true
VERBOSE=false
IS_PRINT_MODE=false
LOG_FILE=""
TIMEOUT=""
PASS_API_KEY=true
ENV_PREFIXES=("CLAUDE_")
WHITELIST_DOMAINS=""
MCP_SERVERS=""
MCP_CONFIG_FILE=""
MCP_PASSTHROUGH=false
CONTAINER_IMAGE="$DEFAULT_IMAGE"

# Arrays for building command
declare -a CLAUDE_ARGS=()
declare -a CONTAINER_ARGS=()
declare -a ENV_VARS=()

# Helper functions
error() {
    echo -e "${RED}Error: $1${NC}" >&2
    exit 1
}

warning() {
    echo -e "${YELLOW}Warning: $1${NC}" >&2
}

info() {
    if [[ "$VERBOSE" == "true" ]] || [[ -z "${IS_PRINT_MODE:-}" ]] || [[ "$IS_PRINT_MODE" != "true" ]]; then
        echo -e "${BLUE}Info: $1${NC}" >&2
    fi
}

success() {
    if [[ "$VERBOSE" == "true" ]] || [[ -z "${IS_PRINT_MODE:-}" ]] || [[ "$IS_PRINT_MODE" != "true" ]]; then
        echo -e "${GREEN}âœ“ $1${NC}" >&2
    fi
}

# Detect container runtime
detect_runtime() {
    if [[ -n "$RUNTIME" ]]; then
        if ! command -v "$RUNTIME" &>/dev/null; then
            error "Specified runtime '$RUNTIME' not found"
        fi
        echo "$RUNTIME"
        return
    fi
    
    if command -v podman &>/dev/null; then
        echo "podman"
    elif command -v docker &>/dev/null; then
        echo "docker"
    else
        error "No container runtime found. Please install podman or docker."
    fi
}

# Load configuration from file with @ syntax
load_from_file() {
    local arg="$1"
    if [[ "$arg" =~ ^@ ]]; then
        local file="${arg:1}"  # Remove @ prefix
        file="${file/#\~/$HOME}"  # Expand tilde
        if [[ -f "$file" ]]; then
            grep -v '^#' "$file" | grep -v '^$' || true
        else
            error "File not found: $file"
        fi
    else
        echo "$arg"
    fi
}

# Parse whitelist domains from file or string
parse_whitelist() {
    local input="$1"
    local domains=""
    
    if [[ -f "$input" ]]; then
        domains=$(grep -v '^#' "$input" | grep -v '^$' | tr '\n' ',' || true)
    else
        domains=$(load_from_file "$input")
    fi
    
    # Remove trailing comma
    echo "${domains%,}"
}

# Build container image if needed
ensure_image() {
    local runtime="$1"
    local image="$2"
    
    # Check if image exists
    if ! $runtime image exists "$image" &>/dev/null; then
        info "Building claude-sandbox image..."
        
        local containerfile="$SANDBOX_ROOT/containers/Containerfile"
        if [[ ! -f "$containerfile" ]]; then
            error "Containerfile not found at: $containerfile"
        fi
        
        if ! $runtime build -t "$image" -f "$containerfile" "$SANDBOX_ROOT/containers/"; then
            error "Failed to build container image"
        fi
        
        success "Container image built successfully"
    fi
}

# Setup network based on mode
setup_network() {
    local mode="$1"
    local whitelist="$2"
    
    case "$mode" in
        none)
            CONTAINER_ARGS+=("--network=none")
            ;;
        host)
            CONTAINER_ARGS+=("--network=host")
            warning "Using host network mode - container has full network access"
            ;;
        whitelist)
            # For now, use default network (allows external access)
            # TODO: Implement proper network filtering with DNS/iptables
            # CONTAINER_ARGS+=("--network=bridge")
            if [[ -n "$whitelist" ]]; then
                # Pass whitelist to container for internal filtering
                ENV_VARS+=("CLAUDE_SANDBOX_WHITELIST=$whitelist")
            fi
            warning "Whitelist mode is experimental - using default network (filtering not yet implemented)"
            ;;
        *)
            error "Unknown network mode: $mode"
            ;;
    esac
}

# Setup MCP servers
setup_mcp() {
    local servers="$1"
    local config_file="$2"
    local passthrough="$3"
    
    if [[ -n "$config_file" ]]; then
        config_file="${config_file/#\~/$HOME}"  # Expand tilde
        if [[ -f "$config_file" ]]; then
            CONTAINER_ARGS+=("-v" "$config_file:/etc/claude-sandbox/mcp-servers.yaml:ro")
            ENV_VARS+=("CLAUDE_MCP_CONFIG=/etc/claude-sandbox/mcp-servers.yaml")
        else
            error "MCP config file not found: $config_file"
        fi
    fi
    
    if [[ -n "$servers" ]]; then
        ENV_VARS+=("CLAUDE_MCP_SERVERS=$servers")
    fi
    
    if [[ "$passthrough" == "true" ]]; then
        # Mount MCP socket directory if it exists
        local mcp_socket_dir="$HOME/.claude/mcp-sockets"
        if [[ -d "$mcp_socket_dir" ]]; then
            CONTAINER_ARGS+=("-v" "$mcp_socket_dir:/home/claude/.claude/mcp-sockets:ro")
        fi
        ENV_VARS+=("CLAUDE_MCP_PASSTHROUGH=true")
    fi
}

# Setup persistence
setup_persistence() {
    local persist_path="$1"
    local use_fresh="$2"
    
    if [[ "$use_fresh" == "true" ]]; then
        info "Starting with fresh configuration"
        return
    fi
    
    # Create config directory if needed
    mkdir -p "$(dirname "$persist_path")"
    
    # Mount persistent config
    if [[ ! -d "$persist_path" ]]; then
        # Create directory if it doesn't exist
        mkdir -p "$persist_path"
    fi
    
    # Ensure the directory has proper permissions for the container user (UID 1000)
    CONTAINER_ARGS+=("-v" "$persist_path:/home/claude/.claude:rw,Z")
}

# Setup logging
setup_logging() {
    local log_file="$1"
    
    if [[ -n "$log_file" ]]; then
        log_file="${log_file/#\~/$HOME}"  # Expand tilde
        local log_dir=$(dirname "$log_file")
        mkdir -p "$log_dir"
        
        # Pass log file to container
        ENV_VARS+=("CLAUDE_LOG_FILE=/logs/session.log")
        CONTAINER_ARGS+=("-v" "$log_dir:/logs:rw")
    fi
}

# Parse environment variable prefixes
setup_env_vars() {
    local prefixes=("$@")
    
    for prefix in "${prefixes[@]}"; do
        # Find all environment variables with this prefix
        while IFS='=' read -r var_name var_value; do
            if [[ "$var_name" =~ ^${prefix} ]]; then
                ENV_VARS+=("$var_name=$var_value")
                CONTAINER_ARGS+=("-e" "$var_name")
            fi
        done < <(env | grep "^${prefix}" || true)
    done
}

# Show help
show_help() {
    cat << EOF
claude-sandbox - Run Claude Code in an isolated container environment

Usage: claude-sandbox [OPTIONS] [DIRECTORY] [-- CLAUDE_ARGS...]

Options:
  --runtime <podman|docker>     Container runtime (auto-detect by default)
  --network <mode>              Network mode: host (default), none, whitelist
  --whitelist <domains|@file>   Allowed domains (requires --network whitelist)
  --whitelist-file <file>       File containing allowed domains
  --no-api-key                  Don't pass through ANTHROPIC_API_KEY
  --env-prefix <prefix>         Pass env vars with prefix (default: CLAUDE_)
  --mcp-servers <list|@file>    MCP servers to enable
  --mcp-config <file>           MCP server configuration file
  --mcp-passthrough             Pass through host MCP connections
  --persist <path>              Persist config (default: ~/.claude-sandbox/config)
  --fresh                       Start with fresh configuration
  --image <image>               Container image (default: claude-sandbox:latest)
  --memory <limit>              Memory limit (e.g., 4g, 512m)
  --cpu <limit>                 CPU limit (e.g., 2.0)
  --timeout <duration>          Maximum runtime (e.g., 1h, 30m)
  --log <path>                  Save session log to path
  --print                       Enable agent mode (pass through to claude)
  --verbose                     Show detailed output
  --help                        Show this help message

Examples:
  # Basic usage - sandbox current directory
  claude-sandbox

  # Sandbox with network whitelist from file
  claude-sandbox --network whitelist --whitelist-file ~/.claude-sandbox/allowed.txt

  # Agent mode with resource limits
  claude-sandbox --print --memory 2g -- --model opus "Analyze code"

  # With MCP servers and logging
  claude-sandbox --mcp-config ~/.claude-sandbox/mcp.yaml --log ~/logs/session.log

EOF
}

# Main function
main() {
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --runtime)
                RUNTIME="$2"
                shift 2
                ;;
            --network)
                NETWORK_MODE="$2"
                shift 2
                ;;
            --whitelist)
                WHITELIST_DOMAINS="$2"
                shift 2
                ;;
            --whitelist-file)
                WHITELIST_DOMAINS=$(parse_whitelist "$2")
                shift 2
                ;;
            --no-api-key)
                PASS_API_KEY=false
                shift
                ;;
            --env-prefix)
                ENV_PREFIXES+=("$2")
                shift 2
                ;;
            --mcp-servers)
                MCP_SERVERS=$(load_from_file "$2")
                shift 2
                ;;
            --mcp-config)
                MCP_CONFIG_FILE="$2"
                shift 2
                ;;
            --mcp-passthrough)
                MCP_PASSTHROUGH=true
                shift
                ;;
            --persist)
                PERSIST_CONFIG="$2"
                shift 2
                ;;
            --fresh)
                USE_FRESH=true
                shift
                ;;
            --image)
                CONTAINER_IMAGE="$2"
                shift 2
                ;;
            --memory)
                MEMORY_LIMIT="$2"
                shift 2
                ;;
            --cpu)
                CPU_LIMIT="$2"
                shift 2
                ;;
            --timeout)
                TIMEOUT="$2"
                shift 2
                ;;
            --log)
                LOG_FILE="$2"
                shift 2
                ;;
            --print)
                IS_PRINT_MODE=true
                CLAUDE_ARGS+=("--print")
                shift
                ;;
            --verbose)
                VERBOSE=true
                shift
                ;;
            --help|-h)
                show_help
                exit 0
                ;;
            --)
                shift
                CLAUDE_ARGS+=("$@")
                break
                ;;
            *)
                # Check if it's a directory
                if [[ -d "$1" ]]; then
                    MOUNT_DIR="$1"
                else
                    CLAUDE_ARGS+=("$1")
                fi
                shift
                ;;
        esac
    done
    
    # Set mount directory to current if not specified
    if [[ -z "$MOUNT_DIR" ]]; then
        MOUNT_DIR="$(pwd)"
    fi
    
    # Detect runtime
    RUNTIME=$(detect_runtime)
    info "Using container runtime: $RUNTIME"
    
    # Ensure container image exists
    ensure_image "$RUNTIME" "$CONTAINER_IMAGE"
    
    # Build container command
    CONTAINER_ARGS=(
        "run"
        "--rm"
        "--interactive"
        "--tty"
        "--security-opt=no-new-privileges"
        "--cap-drop=ALL"
        "--memory=$MEMORY_LIMIT"
        "--cpus=$CPU_LIMIT"
        "-v" "$MOUNT_DIR:/workspace:rw,Z"
        "-w" "/workspace"
    )
    
    # Setup network
    setup_network "$NETWORK_MODE" "$WHITELIST_DOMAINS"
    
    # Setup MCP
    setup_mcp "$MCP_SERVERS" "$MCP_CONFIG_FILE" "$MCP_PASSTHROUGH"
    
    # Setup persistence
    setup_persistence "$PERSIST_CONFIG" "$USE_FRESH"
    
    # Setup logging
    setup_logging "$LOG_FILE"
    
    # Pass API key if requested
    if [[ "$PASS_API_KEY" == "true" ]] && [[ -n "${ANTHROPIC_API_KEY:-}" ]]; then
        CONTAINER_ARGS+=("-e" "ANTHROPIC_API_KEY")
    fi
    
    # Setup environment variables
    setup_env_vars "${ENV_PREFIXES[@]}"
    
    # Add environment variables to container
    if [[ ${#ENV_VARS[@]} -gt 0 ]]; then
        for env_var in "${ENV_VARS[@]}"; do
            CONTAINER_ARGS+=("-e" "$env_var")
        done
    fi
    
    # Add image name
    CONTAINER_ARGS+=("$CONTAINER_IMAGE")
    
    # Add Claude command with --dangerously-skip-permissions
    CONTAINER_ARGS+=("claude" "--dangerously-skip-permissions")
    
    # Add Claude arguments
    if [[ ${#CLAUDE_ARGS[@]} -gt 0 ]]; then
        CONTAINER_ARGS+=("${CLAUDE_ARGS[@]}")
    fi
    
    # Execute with timeout if specified
    if [[ -n "$TIMEOUT" ]]; then
        # Use timeout command
        exec timeout "$TIMEOUT" "$RUNTIME" "${CONTAINER_ARGS[@]}"
    else
        # Handle agent mode output redirection
        if [[ "$IS_PRINT_MODE" == "true" ]]; then
            # In agent mode, container runtime messages go to stderr,
            # Claude output goes to stdout
            exec "$RUNTIME" "${CONTAINER_ARGS[@]}"
        else
            # Normal execution
            exec "$RUNTIME" "${CONTAINER_ARGS[@]}"
        fi
    fi
}

# Run main function
main "$@"